<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <reference id="pecl.bcompiler">
  <title>bcompiler</title>
  <titleabbrev>bcompiler</titleabbrev>
  <partintro>
   &warn.experimental;

  <sect1 id="pecl.bcompiler.partintro">
    <title>Introduction</title>
    <sect2 id="pecl.bcompiler.intro">
      <title>About bcompiler</title>
      <para>
       Bcompiler was written for two reasons: 
      <simplelist>
        <member>To encode some classes in a proprietary php application</member>
        <member>To enable the production of php-gtk applications that could be used on 
        client desktops, without the need for a php.exe.</member>
        <member>To do the feasiblity study for a PHP to C convertor</member>
      </simplelist>
      The first of these goals is achieved using the bcompiler_write_header,  bcompiler_write_class, bcompiler_write_footer, bcompiler_read, and bcompiler_load
      functions. The bytecode files can be written as either uncompressed or plain. The bcompiler_load reads a bzip 
      compressed bytecode file, which tends to be 1/3 of the size of the original file.
      </para>
      To create EXE type files, bcompiler has to be used with a modified sapi file or a version of php which has been
      compiled as a shared library. In this scenario, bcompiler reads the compressed bytecode from the end of the exe file.
      <para>
      </para>
      bcompiler is unlikely to improve performance very much, as it only bypasses the compiler stage of the 
      php running process  and replaces it with the import process in bcompiler. It also does not do any bytecode 
      optimization, this could be added in the future...
      <para>
      </para>
      in terms of code protection, it is safe to say that it would be impossible to recreate the exact source code
      that it was built from, and without the accompanying source code comments. It would effectively be useless to 
      use the bcompiler bytecodes to recreate and modify a class. However it is possible to retreive data from a
      bcompiled bytecode file - so dont put your private passwords or anything in it..
      <para>
      
    </sect2>
    <sect2 id="pecl.bcompiler.install">
     <title>Installation</title>
     <para>
       short installation note:
       <itemizedlist>
       <listitem><simpara>You need at least PHP 4.3.</simpara></listitem>
       <listitem>
         <simpara>
            untar the bcompiler.tgz archive into php4/ext (Get it directly from PEAR
			 <ulink
            url="http://pear.php.net/get/bcompiler">http://pear.php.net/get/bcompiler</ulink>)
         </simpara>
       </listitem>
       <listitem>
         <simpara>
           If the new directory is now called something like
           bcompiler-0.x, then you should rename it to bcompiler (except you
           only want to build it as self-contained php-module)
         </simpara>
       </listitem>
       <listitem><simpara>run phpize in ext/bcompiler</simpara></listitem>
       <listitem><simpara>run ./buildconf in php4</simpara></listitem>
       <listitem>
	     <simpara>
		   run configure with --with-bcompiler (and your other options)
		 </simpara>
	   </listitem>
       <listitem><simpara>make; make install</simpara></listitem>
       <listitem><simpara>that's it.</simpara></listitem>
       </itemizedlist>
       
     </para>

   </sect2>
   <sect2 id="pecl.bcompiler.contact">
     <title>Contact Information</title>
     <para>
     ......
     </para>
     <para>
     If you have comments, bugfixes, enhancements or want to help
     developping this beast, you can drop me a mail at  <ulink
     url="mailto:alan_k@php.net">alan_k@php.net</ulink>. Any help is very
     welcome.
     </para>
   </sect2>
  </sect1>


  </partintro>


<!--   header  -->


  <refentry id="pecl.bcompiler.bcompile-write-header">
   <refnamediv>
    <refname>bcompile_write_header</refname>
    <refpurpose>Writes the bcompiler header</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_write_header</function></funcdef>
      <paramdef>resource <parameter>filehandle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     Writes the header part of a bcompiler file.
    </para>
    <example>
     <title><function>bcompile_write_header</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php
$fh = fopen("/tmp/example","w");
bcompile_write_header($fh);
bcompile_write_class($fh,"DB");
bcompile_write_footer($fh);
fclose($fh);

?>
]]>
     </programlisting>
    </example>
    <para>
     See also: <function>bcompile_write_class</function>, <function>bcompile_write_footer</function>.
    </para>
   </refsect1>
  </refentry>



<!--  footer -->


  <refentry id="pecl.bcompiler.bcompile-write-footer">
   <refnamediv>
    <refname>bcompile_write_footer</refname>
    <refpurpose>Writes the a single character \x00 to indicate End of compiled data</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_write_footer</function></funcdef>
      <paramdef>resource <parameter>filehandle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     Writes the a single character \x00 to indicate End of compiled data
    </para>
    <example>
     <title><function>bcompile_write_footer</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php
$fh = fopen("/tmp/example","w");
bcompile_write_header($fh);
bcompile_write_class($fh,"DB");
bcompile_write_class($fh,"DB_common");
bcompile_write_footer($fh);
fclose($fh);

?>
]]>
     </programlisting>
    </example>
    <para>
     See also: <function>bcompile_write_header</function>, <function>bcompile_write_header</function>.
    </para>
   </refsect1>
  </refentry>




   
   
<!--  footer -->


  <refentry id="pecl.bcompiler.bcompile-write-exe-footer">
   <refnamediv>
    <refname>bcompile_write_exe_footer</refname>
    <refpurpose>Writes the the start pos, and sig to the end of a exe type file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_write_exe_footer</function></funcdef>
      <paramdef>resource <parameter>filehandle</parameter></paramdef>
      <paramdef>int <parameter>startpos</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     An EXE (or self exectutable) file consists of 3 parts, 
    </para> 
    <para>
      <simplelist>
        <member>The Exectutable code (eg. a compiled C program that can initiate call the php bcompiler)</member>
        <member>The Bzip encoded Bytecodes</member>
        <member>The bcompiler exe footer</member>
      </simplelist>
    
      The startpos is the position of in the file at which the Bzip encoded bytecodes start, and can be obtained using 
      ftell($fh), 
    </para>
    <example>
     <title><function>bcompile_write_footer</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php
$fh = fopen("/tmp/example.exe","w");
$size = filesize("/tmp/base.exe");
$fr = fopen("/tmp/base.exe","r");
fwrite($fh,fread($fr,$size),$size);
$startpos = ftell($fh);
/* write bytecodes compressed */
$fz = bzopen($fh,"w");
bcompile_write_header($fz);
bcompile_write_class($fz,"DB");
bcompile_write_class($fz,"DB_common");
bcompile_write_footer($fz);
/* write footer exe uncompressed */
bcompiler_write_exe_footer($fh,$startpos);
fclose($fh);

?>
]]>
     </programlisting>
    </example>
    <para>
     See also:<function>bcompile_write_header</function> <function>bcompile_write_class</function>, <function>bcompile_write_footer</function>.
    </para>
   </refsect1>
  </refentry>


  
   
<!--  read -->


  <refentry id="pecl.bcompiler.bcompile-read">
   <refnamediv>
    <refname>bcompile_read</refname>
    <refpurpose>reads and creates classes from a filehandle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_read</function></funcdef>
      <paramdef>resource <parameter>filehandle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     Reads data from a open file handle and creates classes from the bytecodes
    </para>
    <example>
     <title><function>bcompile_read</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php
$fh = fopen("/tmp/example","r");
bcompile_read($fh);
fclose($fh);
print_r(get_defined_classes());

?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>


   
<!--  load -->


  <refentry id="pecl.bcompiler.bcompile-load">
   <refnamediv>
    <refname>bcompile_load</refname>
    <refpurpose>reads and creates classes from a bz compressed file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_load</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     Reads data from a bzcompressed file and creates classes from the bytecodes
    </para>
    <example>
     <title><function>bcompile_load</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php

bcompile_load("/tmp/example");

print_r(get_defined_classes());

?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>


   
<!--  load_exe -->


  <refentry id="pecl.bcompiler.bcompile-load-exe">
   <refnamediv>
    <refname>bcompile_load_exe</refname>
    <refpurpose>reads and creates classes from a bcompiler exe file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_load_exe</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     Reads data from a bcompiler exe file and creates classes from the bytecodes
    </para>
    <example>
     <title><function>bcompile_load</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php

bcompile_load_exe("/tmp/example.exe");
print_r(get_defined_classes());

?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>


  
   
<!--  parse_class -->


  <refentry id="pecl.bcompiler.parse_class">
   <refnamediv>
    <refname>bcompile_parse_class</refname>
    <refpurpose>reads the bytecodes of a class and calls back to a user function</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompile_parse_class</function></funcdef>
      <paramdef>string <parameter>class</parameter></paramdef>
      <paramdef>string <parameter>callback</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     reads the bytecodes of a class and calls back to a user function
    </para>
    <example>
     <title><function>bcompile_parse_class</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php

function readByteCodes($data) {
  print_r($data);
}

bcompile_parse_class("DB","readByteCodes");


?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>


   
<!--  set_filename_handler -->


  <refentry id="pecl.bcompiler.set_filename_handler">
   <refnamediv>
    <refname>bcompiler_set_filename_handler</refname>
    <refpurpose>sets a functions to handle filename written into the bytecode</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>bcompiler_set_filename_handler</function></funcdef>
      <paramdef>callback <parameter>callback</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   &warn.experimental.func;
    <para>
     When compiling a file bcompiler writes its filename into the bytecode in
     order to know original files (for example, if bytecode will raise an error,
     you can find out the original filename and line number). The filename
     typically includes full path info from the system on which the script is
     compiled, which sometimes isn't desirable. Using filename handler you can
     control the filename this is being actually written into the bytecode.
    </para>
    <para>
     This function sets up a callback function that is being called when filename is written
     into the bytecode. The callback function must take one parameter, the
     full name of the file being complied, and return a string that will 
     actually be written into the bytecode.
    </para>
    <para>
     If you pass an empty string to this function, a specfial processing will
     be enabled. No filename will be ever written to the bytecode, but when
     the bytecode is parsed bcompiler will use the bytecode filename instead.
    </para>
    <para>
     You can omit the parameter to bypass the callback. The actual filename
     will be written. It's the default behavior.
    </para>
    <example>
     <title><function>bcompiler_set_filename_handler</function> example</title>
     <programlisting role="php">
<![CDATA[
<?php

function my_handler($s) { return basename($s); }

$fh = fopen("example.phb", "w");
bcompiler_set_filename_handler("my_handler");
bcompiler_write_header($fh);
bcompiler_write_file($fh, "/some/dir/example.php");
bcompiler_write_footer($fh);
fclose($fh);

/* "example.php" will be written into the bytecode as the filename */

?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
    
   
   
   
   
   
   
   
   
   
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
